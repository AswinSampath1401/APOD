{"version":3,"sources":["components/Home.js","components/Navbar.js","components/spin_wheel.gif","components/Loading.js","components/NasaPhoto.js","App.js","reportWebVitals.js","index.js"],"names":["Home","className","to","NavBar","Loading","src","Spinner","alt","require","config","nasaApi","process","NasaPhoto","useState","photoData","setPhotoData","useEffect","a","fetch","res","json","data","console","log","fetchPhoto","media_type","url","title","frameBorder","gesture","allow","allowFullScreen","date","explanation","App","component","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAGe,SAASA,IACpB,OACI,qBAAKC,UAAU,OAAf,SACI,cAAC,IAAD,CAAMC,GAAG,aAAaD,UAAU,YAAhC,mCCHG,SAASE,IACpB,OACI,qBAAKF,UAAU,SAAf,SACI,6BACI,cAAC,IAAD,CAAMA,UAAU,OAAOC,GAAK,IAA5B,8B,qCCPD,MAA0B,uCCG1B,SAASE,IACpB,OACQ,qBAAKC,IAAKC,EAASC,IAAI,gBCDnCC,EAAQ,IAAUC,SAElB,IAAMC,EAAUC,2CAED,SAASC,IAAa,IAAD,EACEC,mBAAS,MADX,mBACzBC,EADyB,KACdC,EADc,KAoBhC,OAhBAC,qBAAU,WAAM,4CAIZ,8BAAAC,EAAA,sEACsBC,MAAM,+CAAD,OAC4BR,IAFvD,cACUS,EADV,gBAMuBA,EAAIC,OAN3B,OAMUC,EANV,OAOIN,EAAaM,GACbC,QAAQC,IAAIF,GARhB,4CAJY,0DACZG,KAaD,IAEEV,EAKD,qCACI,cAACX,EAAD,IACA,sBAAKF,UAAU,aAAf,UAC8B,UAAzBa,EAAUW,WACP,qBAAKxB,UAAU,QAAQI,IAAKS,EAAUY,IAAKnB,IAAKO,EAAUa,QAEtD,wBACIA,MAAM,cACNtB,IAAKS,EAAUY,IACfE,YAAY,IACZC,QAAQ,QACRC,MAAM,kBACNC,iBAAe,EACf9B,UAAU,UAGtB,gCACI,6BAAKa,EAAUa,QACf,mBAAG1B,UAAU,OAAb,SAAqBa,EAAUkB,OAC/B,oBAAG/B,UAAU,cAAb,UAA4Ba,EAAUmB,YAAtC,gBAvBZ,yCAAG,cAAC9B,EAAD,IAAH,IAAc,sBAAKF,UAAU,gBAAf,cAAgC,cAAC,EAAD,IAAhC,OAAd,O,MCROiC,MAZf,WACE,OACE,cAAC,IAAD,UACE,sBAAKjC,UAAU,MAAf,UACE,cAAC,IAAD,CAAOkC,UAAWnC,EAAMoC,KAAK,IAAIC,OAAK,IACtC,cAAC,IAAD,CAAOF,UAAWvB,EAAWwB,KAAK,qBCF3BE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e271f3ec.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function Home(){\r\n    return(\r\n        <div className='home'>\r\n            <Link to='/nasaphoto' className='home-link'>See into the stars!</Link>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function NavBar(){\r\n    return(\r\n        <div className='navbar'>\r\n            <ul>\r\n                <Link className='link' to = '/'>Take me home</Link>\r\n            </ul>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/spin_wheel.0d136611.gif\";","import React from 'react';\r\nimport Spinner from './spin_wheel.gif'\r\n\r\nexport default function Loading(){\r\n    return(\r\n            <img src={Spinner} alt='Loading Api'></img>\r\n    )\r\n}","import React from 'react'\r\nimport { useState, useEffect } from 'react';\r\nimport NavBar from './Navbar';\r\nimport Loader from './Loading';\r\nrequire('dotenv').config();\r\n\r\nconst nasaApi = process.env.REACT_APP_NASA_KEY;\r\n\r\nexport default function NasaPhoto() {\r\n    const [photoData, setPhotoData] = useState(null);\r\n\r\n\r\n    useEffect(() => {\r\n        fetchPhoto();\r\n\r\n\r\n        async function fetchPhoto() {\r\n            const res = await fetch(\r\n                `https://api.nasa.gov/planetary/apod?api_key=${nasaApi}`\r\n            );\r\n            // console.log(`My APi key is ${apiKey}`);\r\n            // console.log(process.env);\r\n            const data = await res.json();\r\n            setPhotoData(data);\r\n            console.log(data);\r\n        }\r\n    }, []);\r\n\r\n    if (!photoData) return (\r\n        <> <NavBar /> <div className='loading-wheel'> <Loader></Loader> </div> </>\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <NavBar />\r\n            <div className='nasa-photo'>\r\n                {photoData.media_type === \"image\" ? (\r\n                    <img className='photo' src={photoData.url} alt={photoData.title} />\r\n                ) : (\r\n                        <iframe\r\n                            title='space-video'\r\n                            src={photoData.url}\r\n                            frameBorder='0'\r\n                            gesture='media'\r\n                            allow='encrypted-media'\r\n                            allowFullScreen\r\n                            className='photo' />\r\n                    )\r\n                }\r\n                <div>\r\n                    <h1>{photoData.title}</h1>\r\n                    <p className='date'>{photoData.date}</p>\r\n                    <p className='explanation'>{photoData.explanation} </p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport {BrowserRouter , Route} from 'react-router-dom';\n\nimport Home from './components/Home';\nimport NavBar from './components/Navbar';\nimport NasaPhoto from './components/NasaPhoto';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className='app'>\n        <Route component={Home} path='/' exact />\n        <Route component={NasaPhoto} path='/nasaphoto' />\n      </div>\n    \n    </BrowserRouter>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}